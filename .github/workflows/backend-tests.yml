name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: ci
          POSTGRES_PASSWORD: ci_pass
          POSTGRES_DB: ci_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      working-directory: backend
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run database migrations
      working-directory: backend
      env:
        DATABASE_URL: postgresql+psycopg2://ci:ci_pass@localhost:5432/ci_db
        REDIS_URL: redis://localhost:6379/0
        SEC_USER_AGENT: "CI/1.0 ci@example.com"
      run: |
        alembic upgrade head
    
    - name: Run unit tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql+psycopg2://ci:ci_pass@localhost:5432/ci_db
        REDIS_URL: redis://localhost:6379/0
        SEC_USER_AGENT: "CI/1.0 ci@example.com"
        PYTHONPATH: .
      run: |
        pytest tests/ \
          -v \
          -m "unit" \
          --cov=app \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=40 \
          --maxfail=5
    
    - name: Run integration tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql+psycopg2://ci:ci_pass@localhost:5432/ci_db
        REDIS_URL: redis://localhost:6379/0
        SEC_USER_AGENT: "CI/1.0 ci@example.com"
        PYTHONPATH: .
      run: |
        pytest tests/ \
          -v \
          -m "integration and not slow" \
          --tb=short \
          --maxfail=3
    
    - name: Run end-to-end tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql+psycopg2://ci:ci_pass@localhost:5432/ci_db
        REDIS_URL: redis://localhost:6379/0
        SEC_USER_AGENT: "CI/1.0 ci@example.com"
        PYTHONPATH: .
      run: |
        pytest tests/ \
          -v \
          -m "e2e and not slow" \
          --tb=short \
          --maxfail=1
      continue-on-error: true  # E2E tests may need external services
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: backend/htmlcov/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'backend'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
